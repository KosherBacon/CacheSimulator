#include <stdbool.h>

#define A_COLOR 1
#define B_COLOR 2
#define C_COLOR 3

#define DATA_A_ADDR 0xAAAA0000
#define DATA_B_ADDR 0xAAAA2000
#define DATA_C_ADDR 0xAAAA4000

typedef struct Simulator {
    size_t sets; // S
    size_t set_bits; // s
    size_t bytes_per_row; // B
    size_t b_bits; //b
    size_t lines; // E
    size_t data_a_rows, data_a_cols;
    size_t data_b_rows, data_b_cols;
    size_t data_c_rows, data_c_cols;
    /*
     * Bit packed tag bits. We are making the assumption of
     * m = 32 bits, so the higher order bits of an address
     * correspond to the higher order bits in tab_bits.
     */
    size_t tag_size;
    uint32_t tag_bits;
    uint32_t* cache;
} Simulator;

static inline bool cache_contains(uint32_t* cache, size_t rows, uint32_t tag);
static inline uint32_t round_address(uint32_t addr, uint32_t multiple);
void run_simulation(Simulator* sim);
